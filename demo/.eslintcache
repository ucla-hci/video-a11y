[{"/Users/mina/Desktop/video-a11y/demo/src/index.js":"1","/Users/mina/Desktop/video-a11y/demo/src/App.js":"2","/Users/mina/Desktop/video-a11y/demo/src/reportWebVitals.js":"3","/Users/mina/Desktop/video-a11y/demo/src/components/Home.js":"4","/Users/mina/Desktop/video-a11y/demo/src/components/Timeline.js":"5","/Users/mina/Desktop/video-a11y/demo/src/scripts.js":"6","/Users/mina/Desktop/video-a11y/demo/src/components/Segments.js":"7"},{"size":500,"mtime":1610802378864,"results":"8","hashOfConfig":"9"},{"size":378,"mtime":1610801671422,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":1610802378865,"results":"11","hashOfConfig":"9"},{"size":18714,"mtime":1616247605940,"results":"12","hashOfConfig":"9"},{"size":1410,"mtime":1610803316178,"results":"13","hashOfConfig":"14"},{"size":382,"mtime":1616250045753,"results":"15","hashOfConfig":"14"},{"size":7555,"mtime":1615890474164,"results":"16","hashOfConfig":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"kaomhx",{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"warningCount":25,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"30"},"13q6llr",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"30"},"/Users/mina/Desktop/video-a11y/demo/src/index.js",[],"/Users/mina/Desktop/video-a11y/demo/src/App.js",["36"],"import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport Home from './components/Home'\n\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    \n    return (\n      <Router>\n          <Route exact path=\"/\" component={Home}></Route>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","/Users/mina/Desktop/video-a11y/demo/src/reportWebVitals.js",[],"/Users/mina/Desktop/video-a11y/demo/src/components/Home.js",["37","38","39","40","41","42","43","44","45","46","47","48","49","50","51","52","53","54","55","56","57","58","59","60","61"],"import React, { Component } from 'react';\nimport ReactPlayer from 'react-player'\nimport { Header, Button, Image, Message } from 'semantic-ui-react';\nimport classNames from 'classnames';\nimport '../App.css';\nimport axios from 'axios';\nimport Timeline from './Timeline';\nimport Segments from './Segments';\nimport Container from 'react-bootstrap/Container'\nimport Row from 'react-bootstrap/Row'\nimport IconButton from '@material-ui/core/IconButton';\nimport Drawer from '@material-ui/core/Drawer';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport Divider from '@material-ui/core/Divider';\nimport {clips} from '../scripts';\nimport TimeField from 'react-simple-timefield';\nimport KeyboardEventHandler from 'react-keyboard-event-handler';\nimport Speech from \"speak-tts\";\nimport Sound from 'react-sound';\nimport soundUrl from '../sound.mp3';\n\nfunction formatTime(time) {\n    time = Math.round(time);\n    var minutes = Math.floor(time / 60),\n        seconds = time - minutes * 60;\n    \n    seconds = seconds < 10 ? '0' + seconds : seconds;\n    var time = minutes + \":\" + seconds;\n    if(time.length < 5)\n        time = 0 + time;\n    return time;\n}\n\nfunction deformatTime(string) {\n    const arr = string.split(':');\n    var minutes = parseInt(arr[0]) * 60;\n    var seconds = parseInt(arr[1]);\n    return minutes + seconds;\n}\n\n\nclass Home extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            playing: true,\n            playbackRate: 1.0,\n            modalOpen: true,\n            hover: false,\n            message: false,\n            videoID: 'GMVbQ1UsMP8',\n            listening: false,\n            transcript:'',\n            time: '00:00',\n            scene_starts: [],\n            mid_indexes: [],\n            scene_sounds: [],\n            current_level: 0,\n            current_idx: 0,\n            current_mid_idx: 0,\n            last_sound_idx: 0,\n        }\n        this.handleDrawerOpen = this.handleDrawerOpen.bind(this);\n        this.handleDrawerClose = this.handleDrawerClose.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.jumpVideo  = this.jumpVideo.bind(this);\n        this.onTimeChange = this.onTimeChange.bind(this);\n        this.onPause = this._onPause.bind(this);\n        this.handleKey = this.handleKey.bind(this);\n        this.align_segment = this.align_segment.bind(this);\n        this.inspectFrame = this.inspectFrame.bind(this);\n        this.soundPlaying = this.soundPlaying.bind(this);\n    }\n    \n\n\n    componentDidMount() {\n        const speech = new Speech();\n        if(speech.hasBrowserSupport()) { // returns a boolean\n            console.log(\"speech synthesis supported\")\n        }\n        speech.init({\n            'volume': 1,\n             'lang': 'en-GB',\n             'rate': 1.3,\n             'pitch': 1,\n             'voice':'Google US English',\n             'splitSentences': true,\n             'listeners': {\n                 'onvoiceschanged': (voices) => {\n                    //  console.log(\"Event voiceschanged\", voices)\n                 }\n             }})\n        this.setState({speech: speech});\n        this.handleSubmit('GMVbQ1UsMP8')\n\n    }\n\n\n    handleProgress = state => {\n      // We only want to update time slider if we are not currently seeking\n      this.setState(state);\n    }\n  \n    handleDuration = (duration) => {\n      this.setState({ duration });\n    }\n\n    ref = player => {\n        this.player = player;\n    }\n\n    handleDrawerOpen = () => {\n        this.setState({ open: true });\n    };\n    handleDrawerClose = () => {\n        this.setState({ open: false });\n    };\n\n    handleSubmit(videoID) {\n        this.setState({start: 0, videoID: videoID, \n          playing: true,\n        })\n        console.log(\"changed the video\", videoID);\n        this.handleDrawerClose();\n        axios.post('http://ec2-52-79-233-144.ap-northeast-2.compute.amazonaws.com:8000/backend/sessions/', {\n            videoID: videoID,\n        }).then((response) => {\n            sessionStorage.setItem('sessionID', response.data.id)\n            sessionStorage.setItem('sessionCreated', true)\n        });\n\n        var json = require('../' +  videoID + '.json');\n        var scene_starts = [];\n        var scene_labels = [];\n        var scene_sounds = [];\n        for (var i = 0, l = json.length; i < l; i++) {\n            var node = json[i];\n            scene_starts.push(node['Start Time (seconds)']);\n            scene_labels.push(node['Scene Number']);\n            if(node['sound']){\n                scene_sounds.push(node['Scene Number'])\n            }\n        }\n\n        var json = require('../mid_level.json');\n        var mid_indexes = [];\n        var mid_contents = [];\n        for (var i = 0, l = json.length; i < l; i++) {\n            var node = json[i];\n            mid_indexes.push(node['index']);\n            mid_contents.push(node['content']);\n        }\n\n        json =  require('../dynamic.json');\n        var dynamic=[];\n        for (var i = 0, l = json.length; i < l; i++) {\n            node = json[i];\n            dynamic.push(node['content']);\n        }\n\n        \n        json = require('../frames_data.json');\n        var sortable = [];\n        for (var frame in json) {\n            sortable.push([frame, json[frame]['time']]);\n        }\n        sortable.sort(function(a, b) {\n            return a[1] - b[1];\n        });\n        // console.log(sortable);\n        var frame_indexes = []\n        var frame_timestamps = []\n        for (var i = 1, l = sortable.length; i < l; i++) {\n            frame_indexes.push(sortable[i][0]);\n            frame_timestamps.push(sortable[i][1]);\n        }\n\n        this.setState({scene_sounds: scene_sounds, scene_starts: scene_starts, scene_labels:  scene_labels, mid_indexes: mid_indexes, mid_contents: mid_contents,frame_indexes: frame_indexes, frame_timestamps:  frame_timestamps,  dynamic: dynamic});\n        if (sessionStorage.getItem('sessionCreated') === null) {\n            axios.post('http://ec2-52-79-233-144.ap-northeast-2.compute.amazonaws.com:8000/backend/sessions/', {\n              videoID: this.state.videoID,\n            }).then((response) => {\n              sessionStorage.setItem('sessionID', response.data.id)\n              sessionStorage.setItem('sessionCreated', true)\n              console.log('new session created' + sessionStorage.getItem('sessionID'))\n            });\n        }\n    }\n\n    jumpVideo(time, abs=false){\n        console.log(\"here\");\n        if(abs){\n            this.player.seekTo(time);\n        }\n        else{\n            this.player.seekTo(this.state.playedSeconds + time);\n        }\n        // this.setState({playing: tru  e});\n       \n    }\n\n    onTimeChange(event, value) {\n        const newTime = value.replace(/-/g, ':');\n        const time = newTime.substr(0, 5);\n    \n        this.setState({time});\n    }\n\n    _onPause = () =>{\n        console.log(sessionStorage.getItem('sessionID'))\n        axios.post('http://ec2-52-79-233-144.ap-northeast-2.compute.amazonaws.com:8000/backend/sessions/'+sessionStorage.getItem('sessionID')+'/add_pause/', {\n            time: formatTime(this.state.playedSeconds)\n        }).then((response) => {\n            \n            console.log('pause edded' + sessionStorage.getItem('sessionID'), response)\n          });\n\n    }\n\n    handleKey = (key) => {\n        const [current_idx, current_mid_idx] = this.align_segment();\n        this.setState({current_idx: current_idx, current_mid_idx: current_mid_idx});\n        const {scene_starts, mid_indexes, dynamic, current_level, speech, mid_contents} = this.state; \n        var time = deformatTime(this.state.time);\n        switch (key) {\n        case 'enter':\n            this.jumpVideo(time, true);\n            this.setState({entered_time: time});\n            break;\n        case 'space':\n            this.setState({playing: !this.state.playing});\n            break;\n        case 'tab':\n            this.inspectFrame();\n        }\n        var new_idx;\n        if(current_level === 1){\n            switch (key) {\n            case 'left':\n                new_idx = current_idx <= 0? 0 : current_idx-1;\n                var time = scene_starts[mid_indexes[new_idx]];\n                this.jumpVideo(time, true);\n                break;\n            case 'right':\n                new_idx = current_idx === len? current_idx : current_idx+1;\n                var len = mid_indexes.length;\n                var time = scene_starts[mid_indexes[new_idx]];\n                \n                this.jumpVideo(time, true);\n                break;\n            case 'down':\n                this.setState({current_level: 0});\n                return;\n            }\n            speech.cancel();\n            speech.speak({\n                text: mid_contents[new_idx].toString()\n            }).then(() => {\n                console.log(\"Success !\")\n            }).catch(e => {\n                console.error(\"An error occurred :\", e)\n            })\n        }\n        else{\n            switch (key) {\n            case 'left':\n                new_idx = current_idx-1;\n                var time = scene_starts[new_idx];\n                speech.cancel();\n                speech.speak({\n                    text: \"Go back\" + Math.round(scene_starts[current_idx] - time).toString() +\"seconds\"\n                }).then(() => {\n                    console.log(\"Success !\")\n                }).catch(e => {\n                    console.error(\"An error occurred :\", e)\n                })\n                this.jumpVideo(time, true);\n                break;\n            case 'right':\n                new_idx = current_idx + 1;\n                var time = scene_starts[new_idx];\n                speech.cancel();\n                speech.speak({\n                    text: \"Skipped\" + Math.round(time - scene_starts[current_idx]).toString() + \"seconds\"\n                }).then(() => {\n                    console.log(\"Success !\")\n                }).catch(e => {\n                    console.error(\"An error occurred :\", e)\n                })\n                speech.speak({\n                    text: dynamic[new_idx].toString()\n                }).then(() => {\n                    console.log(\"Success !\")\n                }).catch(e => {\n                    console.error(\"An error occurred :\", e)\n                })\n                this.jumpVideo(time, true);\n                break;\n            case 'up':\n                this.setState({current_level: 1});\n                return;\n            }\n        }\n    }\n\n    align_segment() {\n        var {playedSeconds, scene_starts, mid_indexes} = this.state;\n        var time = Math.round(playedSeconds);\n        time = !time ? 0 : time;\n        var closest_past = Math.max.apply(Math, scene_starts.filter(function(x, index){return x <= time}));\n        var closest_index = scene_starts.findIndex( x => x == closest_past );\n        var closest_mid_past = Math.max.apply(Math, mid_indexes.filter(function(x){return x <= closest_index + 1}));\n        var closest_mid_index = mid_indexes.findIndex( x => x == closest_mid_past );\n        closest_index = closest_index < 0? 0 : closest_index;\n        closest_mid_index = closest_mid_index < 0? 0: closest_mid_index;\n        return [closest_index, closest_mid_index];\n      }\n\n    inspectFrame() {\n        const {videoID, current_idx, speech} = this.state;\n        var json = require('../' + videoID + '.json');\n        var scene = json[current_idx];\n        var object, label;\n        if (scene['texts'].length){\n            speech.cancel();\n            console.log(scene['texts'])\n            speech.speak({\n                text: \"Detected text\" + scene['texts'].join(', ')\n            }).then(() => {\n                console.log(\"Success !\")\n            }).catch(e => {\n                console.error(\"An error occurred :\", e)\n            })\n        }\n        if (Object.keys(scene['objects']).length){\n            for(var object_key in scene['objects']){\n                object = scene['objects'][object_key];\n                speech.speak({\n                    text: \"Detected\" + object_key + 'on' + object['pos'] + 'size' + object['size']\n                }).then(() => {\n                    console.log(\"Success !\")\n                }).catch(e => {\n                    console.error(\"An error occurred :\", e)\n                })\n            }\n        }\n        else if(Object.keys(scene['labels']).length){\n            speech.speak({\n                text: \"This frame may contain\" + scene['labels'].join(', ')\n            }).then(() => {\n                console.log(\"Success !\")\n            }).catch(e => {\n                console.error(\"An error occurred :\", e)\n            })\n        }\n        else{\n            speech.speak({\n                text: \"Nothing detected\"\n            }).then(() => {\n                console.log(\"Success !\")\n            }).catch(e => {\n                console.error(\"An error occurred :\", e)\n            })\n        } \n    }\n\n    soundPlaying(current_idx){\n        var scene_number = current_idx + 1;\n        console.log(current_idx, this.state.last_sound_idx)\n        if (this.state.scene_sounds.includes(scene_number)){\n            if( current_idx !== this.state.last_sound_idx){\n                setTimeout(function() { //Start the timer\n                    console.log(\"timer up\")\n                    this.setState({last_sound_idx: current_idx}) //After 1 second, set render to true\n                }.bind(this), 600)\n                return Sound.status.PLAYING;\n            }\n        }\n        return Sound.status.STOPPED\n       \n    }\n\n    \n    render() {\n        const { videoID, playing, playbackRate, listening, transcript} = this.state;\n        const [current_idx, current_mid_idx] = this.align_segment();\n        return (\n            <div className=\"Home\">\n                <KeyboardEventHandler\n                    handleKeys={['space', 'tab', 'left', 'up', 'right', 'down']}\n                    onKeyEvent={(key, e) => this.handleKey(key)}>\n                </KeyboardEventHandler>\n                <div className=\"header-bar\">\n                    <div className=\"header-title\">\n                        <Header as=\"h2\">\n                            Video A11y\n                        </Header>\n                    </div>   \n                    <IconButton\n                        aria-label=\"Open drawer\"\n                        onClick={this.handleDrawerOpen}>\n                        <MenuIcon style={{ fontSize: '30px'}}/>\n                    </IconButton>\n                    <Drawer\n                        classes={{\n                            paper: classNames(\"drawerPaper\", !this.state.open && \"drawerPaperClose\"),\n                        }}\n                        open={this.state.open} anchor=\"right\" >\n                        <div>\n                            <IconButton onClick={this.handleDrawerClose}>\n                            <ChevronRightIcon />\n                            </IconButton>\n                        </div>\n                        <Divider />\n                        {clips.map((clip, index) => (\n                            <div key={index}>\n                            <Button style={{ fontSize: '15px', width: '100%', paddingTop: '10%', paddingBottom: '12%' }} key={clip}\n                                onClick={() => this.handleSubmit(clip.videoID)}>\n                                <div style={{ position: 'absolute' }}>\n                                {clip.title}\n                                </div>\n                            </Button>\n                            </div>\n                        ))}\n                    </Drawer>\n                </div>\n                <Container className=\"upper-page\">\n                <div className=\"split-left\"  tabIndex=\"1\" >\n                        <img src={\"space-bar-icon-25.png\"} style={{width: '50%', marginTop: '3vh'}} alt={\"Icon of up, down, left, right keys from keyboard\"}/>\n                        <div className=\"text-option-text\">\n                            ⬆/⬇: Change level of unit<br/>\n                            ⬅: Jump to nearest past unit<br/>\n                            ⬅: Jump to nearest future unit\n                        </div>\n                </div>\n                <div className=\"split-center\"  tabIndex=\"1\" >\n                    <Row className=\"main-video\">\n                        <ReactPlayer ref={this.ref} playing={this.state.playing}\n                            playbackRate={playbackRate} id=\"video\"  width=\"100%\" height=\"100%\" controls url = {`https://www.youtube.com/watch?v=${videoID}`} onPause={this._onPause}\n                            onPlay={this._onPlay}\n                            onReady={this._onReady}\n                            onProgress={this.handleProgress}\n                            onDuration={this.handleDuration}\n                            onSeek={this._onSeek}>\n                        </ReactPlayer>\n                    </Row>\n                </div>\n                <div className=\"split-right\" >\n                    <KeyboardEventHandler\n                    handleKeys={['enter']}\n                    onKeyEvent={(key, e) => this.handleKey(key)}>\n                    {/* <div className=\"search-bar-top\">\n                        <div className=\"last-command\">{this.state.last_query}</div>\n                    </div>\n                    <form onSubmit={this.onRequestSearchHandler}>\n                        <input type=\"text\" className=\"search-bar\"/>\n                    </form> */}\n                    <div className=\"text-option-text\"> Jump to: </div>\n                    <TimeField\n                        value={formatTime(this.state.playedSeconds)} onChange={this.onTimeChange}\n                        style={{ border: '2px solid #666', fontSize: 42, width: 130,\n                        padding: '5px 8px', color: '#333', borderRadius: 5}}\n                    />\n                    </KeyboardEventHandler>\n                </div>    \n                </Container>\n                <Container className=\"lower-page\">\n                \n                <Timeline   videoTime={this.state.playedSeconds} duration={this.state.duration} ></Timeline>\n                <Segments videoID={this.state.videoID} scene_starts =  {this.state.scene_starts} scene_labels = {this.state.scene_labels} current_idx = {current_idx} current_mid_idx={current_mid_idx} mid_indexes = {this.state.mid_indexes} mid_contents = {this.state.mid_contents} entered_time = {this.state.entered_time} dynamic = {this.state.dynamic}></Segments>\n                </Container>\n                <Sound\n                    url={soundUrl}\n                    playStatus={this.soundPlaying(current_idx)}\n                />\n            </div>\n        )\n    }\n}\nexport default Home;\n","/Users/mina/Desktop/video-a11y/demo/src/components/Timeline.js",["62","63","64","65"],"import React from \"react\";\nimport '../App.css';\nimport {Progress} from 'semantic-ui-react';\nimport 'semantic-ui-css/semantic.min.css'\nimport { Clickable } from 'react-clickable';\nimport { css } from \"@emotion/react\";\nimport ScaleLoader from \"react-spinners/ScaleLoader\";\n\n\nfunction formatTime(time) {\n    time = Math.round(time);\n  \n    var minutes = Math.floor(time / 60),\n        seconds = time - minutes * 60;\n    seconds = seconds < 10 ? '0' + seconds : seconds;\n    return minutes + \":\" + seconds;\n}\n\n  const override = css`\n  position: absolute;\n  font-size: 5px;\n  height: 5px;\n  left: 69vw; \n  margin-top: -3.8vh;\n`;\n\n\n\nexport default class Timeline extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            hoverPreview: false,\n        };\n\n        this.showPreview = this.showPreview.bind(this);\n    }\n\n   \n\n\n    showPreview = (index) => {\n        this.setState({hoverPreview: index});\n    }\n\n\n\n    render() {\n        const { videoTime, duration} = this.props;\n        const { showPreview } = this;\n        return (\n            <div className=\"progressBar-container\">\n                <div className=\"progressBar\">\n                    <Progress percent={Math.floor(videoTime/duration*100)}color='light-grey' />\n                    <div className=\"time-progress\">{formatTime(videoTime)}</div>\n                </div>\n            </div>\n        );\n    }};",["66","67"],"/Users/mina/Desktop/video-a11y/demo/src/scripts.js",[],"/Users/mina/Desktop/video-a11y/demo/src/components/Segments.js",["68","69","70","71","72","73","74","75","76","77","78","79","80","81"],"import React from \"react\";\nimport '../App.css';\nimport 'semantic-ui-css/semantic.min.css'\nimport { Clickable } from 'react-clickable';\nimport Highlighter from \"react-highlight-words\";\nimport KeyboardEventHandler from 'react-keyboard-event-handler';\nimport Speech from \"speak-tts\";\n\n\n\n\nfunction formatTime(time) {\n    time = Math.round(time);\n    var minutes = Math.floor(time / 60),\n        seconds = time - minutes * 60;\n    seconds = seconds < 10 ? '0' + seconds : seconds;\n    return minutes + \":\" + seconds;\n}\n\n\n\n\nexport default class Segments extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            hoverPreview: false,\n        };\n\n        this.handleKey = this.handleKey.bind(this);\n    }\n\n    componentDidMount() {\n      const speech = new Speech();\n        if(speech.hasBrowserSupport()) { // returns a boolean\n            console.log(\"speech synthesis supported\")\n        }\n        speech.init({\n            'volume': 1,\n             'lang': 'en-GB',\n             'rate': 1.3,\n             'pitch': 1,\n             'voice':'Google UK English Male',\n             'splitSentences': true,\n             'listeners': {\n                 'onvoiceschanged': (voices) => {\n                    //  console.log(\"Event voiceschanged\", voices)\n                 }\n             }}).then((data) => {\n            // The \"data\" object contains the list of available voices and the voice synthesis params\n            console.log(\"Speech is ready, voices are available\", data)\n        }).catch(e => {\n            console.error(\"An error occured while initializing : \", e)\n        })\n        this.setState({speech: speech});\n    }\n    static getDerivedStateFromProps(props, current_state) {\n      if (current_state.entered_time !== props.entered_time) {\n        if(!current_state.speech) return;\n\n        var closest_past = Math.max.apply(Math, props.scene_starts.filter(function(x, index){return x <= props.entered_time}));\n        var closest_index = props.starts.findIndex( x => x == closest_past );\n        var closest_mid_past = Math.max.apply(Math, props.mid_indexes.filter(function(x){return x <= closest_index + 1}));\n        var closest_mid_index = props.mid_indexes.findIndex( x => x == closest_mid_past );\n        closest_mid_index = closest_mid_index < 0? 0: closest_mid_index;\n        current_state.speech.speak({\n            text: props.mid_contents[closest_mid_index]\n        }).then(() => {\n            console.log(\"Success !\")\n        }).catch(e => {\n            console.error(\"An error occurred :\", e)\n        })\n        current_state.entered_time = props.entered_time;\n        current_state.current_level = 1;\n      }\n      return null\n    }\n\n\n    handleKey = (key, jumpVideo, current_idx) => {\n      console.log(key, current_idx, this.props.current_level);\n      var new_idx;\n      if(this.state.current_level === 1){\n        switch (key) {\n          case 'left':\n            new_idx = current_idx <= 0? 0 : current_idx-1;\n            var time = this.props.scene_starts[this.props.mid_indexes[new_idx]];\n            jumpVideo(time, true);\n            break;\n          case 'right':\n            new_idx = current_idx === len? current_idx : current_idx+1;\n            var len = this.props.mid_indexes.length;\n            var time = this.props.scene_starts[this.props.mid_indexes[new_idx]];\n            console.log(time);\n            jumpVideo(time, true);\n            break;\n          case 'down':\n            this.setState({current_level: 0});\n            return;\n        }\n        this.state.speech.speak({\n            text: this.props.mid_contents[new_idx].toString()\n        }).then(() => {\n            console.log(\"Success !\")\n        }).catch(e => {\n            console.error(\"An error occurred :\", e)\n        })\n      }\n      else{\n        switch (key) {\n          case 'left':\n            new_idx = current_idx-1;\n            var time = this.props.starts[new_idx];\n            this.state.speech.speak({\n                text: \"Go back\" + (this.props.scene_starts[current_idx] - time).toString() +\"seconds\"\n            }).then(() => {\n                console.log(\"Success !\")\n            }).catch(e => {\n                console.error(\"An error occurred :\", e)\n            })\n            jumpVideo(time, true);\n            break;\n          case 'right':\n            new_idx = current_idx + 1;\n            var time = this.props.scene_starts[new_idx];\n            // this.state.speech.speak({\n            //     text: \"Skipped\" + (this.props.scene_starts[new_idx] - this.props.scene_starts[current_idx]).toString() + \"seconds\"\n            // }).then(() => {\n            //     console.log(\"Success !\")\n            // }).catch(e => {\n            //     console.error(\"An error occurred :\", e)\n            // })\n            this.state.speech.speak({\n                text: this.props.dynamic[new_idx].toString()\n            }).then(() => {\n                console.log(\"Success !\")\n            }).catch(e => {\n                console.error(\"An error occurred :\", e)\n            })\n            jumpVideo(time, true);\n            break;\n          case 'up':\n            this.setState({current_level: 1});\n            return;\n        }\n      }\n    }\n\n\n\n    render() {\n        const { videoID, videoTime, jumpVideo, scene_starts, scene_labels, mid_indexes, mid_contents, current_idx, current_mid_idx, current_level} = this.props;\n        if (current_level === 1){\n          return(\n            <div className=\"segments-container\">\n                {mid_indexes.slice(current_mid_idx, current_mid_idx + 4).map((mid_index, idx) => {\n                    var keywords = []\n                    return(\n                      <div onClick={() => this.onClick(mid_index-1)}>\n                      <div className=\"mid-text-option-item\">\n                        <div className=\"text-option-text\">\n                          <div className=\"text-option-meta\">\n                            <div className=\"time-option\">\n                            {formatTime(scene_starts[mid_index-1])} \n                            </div>\n                          </div>\n                          <div className=\"text-option\">\n                          <Highlighter\n                              searchWords={keywords}\n                              autoEscape={true}\n                              textToHighlight={mid_contents[current_mid_idx + idx]}\n                          />\n                          </div>\n                        </div>\n                      </div>\n                      </div>  )\n                     })}\n                    \n            </div>)\n        }\n        \n        return (\n            <div className=\"segments-container\">\n                {scene_starts.slice(current_idx, current_idx + 4).map((time, idx) => {\n                    var index = current_idx + idx;\n                    var keywords = []\n                    return(\n                      <div >\n                      <div className=\"text-option-item\">\n                        <div className=\"text-option-text\">\n                          <div className=\"scene-number\">\n                            Scene #{scene_labels[index]} \n                          </div>\n                          <div className=\"scene-time\">\n                           {formatTime(time)} \n                          </div>\n                          <div className=\"text-option\">\n\n                          </div>\n                        </div>\n                      </div>\n                      </div> )\n                     })}\n            </div>\n        );\n    }};",{"ruleId":"82","severity":1,"message":"83","line":8,"column":3,"nodeType":"84","messageId":"85","endLine":10,"endColumn":4},{"ruleId":"86","severity":1,"message":"87","line":3,"column":26,"nodeType":"88","messageId":"89","endLine":3,"endColumn":31},{"ruleId":"86","severity":1,"message":"90","line":3,"column":33,"nodeType":"88","messageId":"89","endLine":3,"endColumn":40},{"ruleId":"91","severity":1,"message":"92","line":29,"column":9,"nodeType":"88","messageId":"93","endLine":29,"endColumn":13},{"ruleId":"91","severity":1,"message":"94","line":147,"column":13,"nodeType":"88","messageId":"93","endLine":147,"endColumn":17},{"ruleId":"91","severity":1,"message":"95","line":150,"column":18,"nodeType":"88","messageId":"93","endLine":150,"endColumn":19},{"ruleId":"91","severity":1,"message":"96","line":150,"column":25,"nodeType":"88","messageId":"93","endLine":150,"endColumn":26},{"ruleId":"91","severity":1,"message":"97","line":151,"column":17,"nodeType":"88","messageId":"93","endLine":151,"endColumn":21},{"ruleId":"91","severity":1,"message":"95","line":158,"column":18,"nodeType":"88","messageId":"93","endLine":158,"endColumn":19},{"ruleId":"91","severity":1,"message":"96","line":158,"column":25,"nodeType":"88","messageId":"93","endLine":158,"endColumn":26},{"ruleId":"91","severity":1,"message":"95","line":175,"column":18,"nodeType":"88","messageId":"93","endLine":175,"endColumn":19},{"ruleId":"91","severity":1,"message":"96","line":175,"column":25,"nodeType":"88","messageId":"93","endLine":175,"endColumn":26},{"ruleId":"98","severity":1,"message":"99","line":227,"column":9,"nodeType":"100","messageId":"101","endLine":237,"endColumn":10},{"ruleId":"98","severity":1,"message":"99","line":240,"column":13,"nodeType":"100","messageId":"101","endLine":256,"endColumn":14},{"ruleId":"91","severity":1,"message":"92","line":243,"column":21,"nodeType":"88","messageId":"93","endLine":243,"endColumn":25},{"ruleId":"102","severity":1,"message":"103","line":247,"column":43,"nodeType":"88","messageId":"104","endLine":247,"endColumn":46},{"ruleId":"91","severity":1,"message":"92","line":249,"column":21,"nodeType":"88","messageId":"93","endLine":249,"endColumn":25},{"ruleId":"98","severity":1,"message":"99","line":267,"column":13,"nodeType":"100","messageId":"101","endLine":304,"endColumn":14},{"ruleId":"91","severity":1,"message":"92","line":270,"column":21,"nodeType":"88","messageId":"93","endLine":270,"endColumn":25},{"ruleId":"91","severity":1,"message":"92","line":283,"column":21,"nodeType":"88","messageId":"93","endLine":283,"endColumn":25},{"ruleId":"105","severity":1,"message":"106","line":313,"column":60,"nodeType":"107","messageId":"108","endLine":313,"endColumn":62},{"ruleId":"105","severity":1,"message":"106","line":315,"column":63,"nodeType":"107","messageId":"108","endLine":315,"endColumn":65},{"ruleId":"86","severity":1,"message":"109","line":325,"column":21,"nodeType":"88","messageId":"89","endLine":325,"endColumn":26},{"ruleId":"86","severity":1,"message":"110","line":387,"column":26,"nodeType":"88","messageId":"89","endLine":387,"endColumn":33},{"ruleId":"86","severity":1,"message":"111","line":387,"column":49,"nodeType":"88","messageId":"89","endLine":387,"endColumn":58},{"ruleId":"86","severity":1,"message":"112","line":387,"column":60,"nodeType":"88","messageId":"89","endLine":387,"endColumn":70},{"ruleId":"86","severity":1,"message":"113","line":5,"column":10,"nodeType":"88","messageId":"89","endLine":5,"endColumn":19},{"ruleId":"86","severity":1,"message":"114","line":7,"column":8,"nodeType":"88","messageId":"89","endLine":7,"endColumn":19},{"ruleId":"86","severity":1,"message":"115","line":19,"column":9,"nodeType":"88","messageId":"89","endLine":19,"endColumn":17},{"ruleId":"86","severity":1,"message":"116","line":50,"column":17,"nodeType":"88","messageId":"89","endLine":50,"endColumn":28},{"ruleId":"117","replacedBy":"118"},{"ruleId":"119","replacedBy":"120"},{"ruleId":"86","severity":1,"message":"113","line":4,"column":10,"nodeType":"88","messageId":"89","endLine":4,"endColumn":19},{"ruleId":"86","severity":1,"message":"121","line":6,"column":8,"nodeType":"88","messageId":"89","endLine":6,"endColumn":28},{"ruleId":"105","severity":1,"message":"106","line":62,"column":60,"nodeType":"107","messageId":"108","endLine":62,"endColumn":62},{"ruleId":"105","severity":1,"message":"106","line":64,"column":69,"nodeType":"107","messageId":"108","endLine":64,"endColumn":71},{"ruleId":"98","severity":1,"message":"99","line":84,"column":9,"nodeType":"100","messageId":"101","endLine":100,"endColumn":10},{"ruleId":"102","severity":1,"message":"103","line":91,"column":39,"nodeType":"88","messageId":"104","endLine":91,"endColumn":42},{"ruleId":"91","severity":1,"message":"92","line":93,"column":17,"nodeType":"88","messageId":"93","endLine":93,"endColumn":21},{"ruleId":"98","severity":1,"message":"99","line":110,"column":9,"nodeType":"100","messageId":"101","endLine":145,"endColumn":10},{"ruleId":"91","severity":1,"message":"92","line":113,"column":17,"nodeType":"88","messageId":"93","endLine":113,"endColumn":21},{"ruleId":"91","severity":1,"message":"92","line":125,"column":17,"nodeType":"88","messageId":"93","endLine":125,"endColumn":21},{"ruleId":"86","severity":1,"message":"122","line":152,"column":17,"nodeType":"88","messageId":"89","endLine":152,"endColumn":24},{"ruleId":"86","severity":1,"message":"123","line":152,"column":26,"nodeType":"88","messageId":"89","endLine":152,"endColumn":35},{"ruleId":"86","severity":1,"message":"124","line":152,"column":37,"nodeType":"88","messageId":"89","endLine":152,"endColumn":46},{"ruleId":"86","severity":1,"message":"125","line":186,"column":25,"nodeType":"88","messageId":"89","endLine":186,"endColumn":33},"no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","no-unused-vars","'Image' is defined but never used.","Identifier","unusedVar","'Message' is defined but never used.","no-redeclare","'time' is already defined.","redeclared","'json' is already defined.","'i' is already defined.","'l' is already defined.","'node' is already defined.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","no-use-before-define","'len' was used before it was defined.","usedBeforeDefined","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'label' is defined but never used.","'playing' is assigned a value but never used.","'listening' is assigned a value but never used.","'transcript' is assigned a value but never used.","'Clickable' is defined but never used.","'ScaleLoader' is defined but never used.","'override' is assigned a value but never used.","'showPreview' is assigned a value but never used.","no-native-reassign",["126"],"no-negated-in-lhs",["127"],"'KeyboardEventHandler' is defined but never used.","'videoID' is assigned a value but never used.","'videoTime' is assigned a value but never used.","'jumpVideo' is assigned a value but never used.","'keywords' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]
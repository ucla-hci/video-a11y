[{"/Users/mina/Desktop/video-a11y/demo/src/index.js":"1","/Users/mina/Desktop/video-a11y/demo/src/App.js":"2","/Users/mina/Desktop/video-a11y/demo/src/reportWebVitals.js":"3","/Users/mina/Desktop/video-a11y/demo/src/components/Home.js":"4","/Users/mina/Desktop/video-a11y/demo/src/components/Timeline.js":"5","/Users/mina/Desktop/video-a11y/demo/src/scripts.js":"6","/Users/mina/Desktop/video-a11y/demo/src/components/Segments.js":"7"},{"size":500,"mtime":1610802378864,"results":"8","hashOfConfig":"9"},{"size":378,"mtime":1610801671422,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":1610802378865,"results":"11","hashOfConfig":"9"},{"size":10660,"mtime":1611719951103,"results":"12","hashOfConfig":"9"},{"size":1410,"mtime":1610803316178,"results":"13","hashOfConfig":"9"},{"size":248,"mtime":1610801681194,"results":"14","hashOfConfig":"9"},{"size":9177,"mtime":1611719774919,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"ry2g01",{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"18"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"18"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"18"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34"},"/Users/mina/Desktop/video-a11y/demo/src/index.js",[],["35","36"],"/Users/mina/Desktop/video-a11y/demo/src/App.js",["37"],"import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport Home from './components/Home'\n\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    \n    return (\n      <Router>\n          <Route exact path=\"/\" component={Home}></Route>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","/Users/mina/Desktop/video-a11y/demo/src/reportWebVitals.js",[],"/Users/mina/Desktop/video-a11y/demo/src/components/Home.js",["38","39","40","41","42","43","44","45","46","47","48","49","50"],"import React, { Component } from 'react';\nimport ReactPlayer from 'react-player'\nimport { Header, Button, Image, Message } from 'semantic-ui-react';\nimport classNames from 'classnames';\nimport '../App.css';\nimport Timeline from './Timeline';\nimport Segments from './Segments';\nimport Container from 'react-bootstrap/Container'\nimport Row from 'react-bootstrap/Row'\nimport IconButton from '@material-ui/core/IconButton';\nimport Drawer from '@material-ui/core/Drawer';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport Divider from '@material-ui/core/Divider';\nimport {clips} from '../scripts';\nimport { Clickable } from 'react-clickable';\nimport Blink from 'react-blink-text';\nimport TimeField from 'react-simple-timefield';\nimport KeyboardEventHandler from 'react-keyboard-event-handler';\n\n\nfunction formatTime(time) {\n    console.log(time);\n    time = Math.round(time);\n    var minutes = Math.floor(time / 60),\n        seconds = time - minutes * 60;\n    \n    seconds = seconds < 10 ? '0' + seconds : seconds;\n    var time = minutes + \":\" + seconds;\n    if(time.length < 5)\n        time = 0 + time;\n    return time;\n}\n\nfunction deformatTime(string) {\n    const arr = string.split(':');\n    var minutes = parseInt(arr[0]) * 60;\n    var seconds = parseInt(arr[1]);\n    return minutes + seconds;\n}\n\nclass Home extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            playing: false,\n            playbackRate: 1.0,\n            modalOpen: true,\n            hover: false,\n            message: false,\n            videoID: 'GMVbQ1UsMP8',\n            listening: false,\n            transcript:'',\n            time: '00:00',\n            starts: [], \n            mid_indexes: [],\n        }\n        this.handleDrawerOpen = this.handleDrawerOpen.bind(this);\n        this.handleDrawerClose = this.handleDrawerClose.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.jumpVideo  = this.jumpVideo.bind(this);\n        this.onTimeChange = this.onTimeChange.bind(this);\n        this.state.handleKey = this.handleKey.bind(this);\n    }\n\n\n    componentDidMount() {\n\n        var json = require('../GMVbQ1UsMP8.json');\n        var starts = [];\n        var contents = [];\n        for (var i = 0, l = json.length; i < l; i++) {\n        var node = json[i];\n        starts.push(node['start']);\n        contents.push(node['content']);\n        }\n\n        json = require('../mid_level.json');\n        var mid_indexes = [];\n        var mid_contents = [];\n        for (var i = 0, l = json.length; i < l; i++) {\n        node = json[i];\n        mid_indexes.push(node['index']);\n        mid_contents.push(node['content']);\n        }\n        console.log(\"here\", mid_indexes);\n\n        \n\n        this.setState({starts: starts, contents:  contents, mid_indexes: mid_indexes, mid_contents: mid_contents});\n\n    }\n\n\n    handleProgress = state => {\n      // We only want to update time slider if we are not currently seeking\n      this.setState(state);\n    }\n  \n    handleDuration = (duration) => {\n      this.setState({ duration });\n    }\n\n    ref = player => {\n        this.player = player;\n    }\n\n    handleDrawerOpen = () => {\n        this.setState({ open: true });\n    };\n    handleDrawerClose = () => {\n        this.setState({ open: false });\n    };\n\n    handleSubmit(videoID) {\n        this.setState({start: 0, videoID: videoID, url: '', navigations: [], bookmarks: [],\n          current_query: '',\n          playing: true,\n          transcript: '',\n          suggestions: [],\n          option_suggestions: [],\n          option_indexes: [],\n          time_options: [],\n          content_options: [],\n          keyword_indexes: [],\n        })\n        console.log(\"changed the video\", videoID);\n        this.handleDrawerClose();\n    }\n\n    jumpVideo(time, abs=false){\n        if(abs){\n            this.player.seekTo(time);\n        }\n        else{\n            this.player.seekTo(this.state.playedSeconds + time);\n        }\n       \n    }\n\n    onTimeChange(event, value) {\n        const newTime = value.replace(/-/g, ':');\n        const time = newTime.substr(0, 5);\n        console.log(newTime, time);\n    \n        this.setState({time});\n    }\n    handleKey = (key) => {\n        console.log(key, this.state.time);\n        var time = deformatTime(this.state.time);\n        switch (key) {\n        case 'enter':\n            this.jumpVideo(time, true);\n            this.setState({entered_time: time});\n            break;\n        case 'space':\n            this.setState({playing: !this.state.playing});\n            break;\n        }\n    }\n    \n    \n    \n    render() {\n        const { videoID, playing, playbackRate, listening, transcript, time} = this.state;\n        const { addFlag, flagClickHandler, showFlags, addParticipationPoint } = this;\n\n        return (\n            <div className=\"Home\">\n                <KeyboardEventHandler\n                    handleKeys={['space']}\n                    onKeyEvent={(key, e) => this.handleKey(key)}>\n                </KeyboardEventHandler>\n                <div className=\"header-bar\">\n                    <div className=\"header-title\">\n                        <Header as=\"h2\">\n                            Video A11y\n                        </Header>\n                    </div>   \n                    <IconButton\n                        aria-label=\"Open drawer\"\n                        onClick={this.handleDrawerOpen}>\n                        <MenuIcon style={{ fontSize: '30px'}}/>\n                    </IconButton>\n                    <Drawer\n                        classes={{\n                            paper: classNames(\"drawerPaper\", !this.state.open && \"drawerPaperClose\"),\n                        }}\n                        open={this.state.open} anchor=\"right\" >\n                        <div>\n                            <IconButton onClick={this.handleDrawerClose}>\n                            <ChevronRightIcon />\n                            </IconButton>\n                        </div>\n                        <Divider />\n                        {clips.map((clip, index) => (\n                            <div key={index}>\n                            <Button style={{ fontSize: '12px', width: '100%', paddingTop: '10%', paddingBottom: '12%' }} key={clip}\n                                onClick={() => this.handleSubmit(clip.videoID)}>\n                                <img src={clip.image} style={{width: '70%', height: '70%', }} />\n                                <div style={{ position: 'absolute' }}>\n                                {clip.title}\n                                </div>\n                            </Button>\n                            </div>\n                        ))}\n                    </Drawer>\n                </div>\n                <Container className=\"upper-page\">\n                <div className=\"split-left\"  tabIndex=\"1\" >\n                        <img src={\"space-bar-icon-25.png\"} style={{width: '50%', marginTop: '3vh'}} alt={\"Icon of up, down, left, right keys from keyboard\"}/>\n                        <div className=\"text-option-text\">\n                            ⬆/⬇: Change level of unit<br/>\n                            ⬅: Jump to nearest past unit<br/>\n                            ⬅: Jump to nearest future unit\n                        </div>\n                </div>\n                <div className=\"split-center\"  tabIndex=\"1\" >\n                    <Row className=\"main-video\">\n                        <ReactPlayer ref={this.ref} playing={this.state.playing}\n                            playbackRate={playbackRate} id=\"video\"  width=\"100%\" height=\"100%\" controls url = {`https://www.youtube.com/watch?v=${videoID}`} onPause={this._onPause}\n                            onPlay={this._onPlay}\n                            onReady={this._onReady}\n                            onProgress={this.handleProgress}\n                            onDuration={this.handleDuration}\n                            onSeek={this._onSeek}>\n                        </ReactPlayer>\n                    </Row>\n                    <div className=\"container-wrapper\">\n                        <div className=\"container-transcript\">\n                            {!listening? <div className=\"sys-instruction\">Click below to start talking!</div> :\n                            transcript? <div className=\"sys-instruction\">You said: </div>\n                            : <Blink color='black' text='Say something to the system!' fontSize='70'/> }\n                            <div className=\"text-option\">\n                            {transcript}\n                            </div>\n                            <br/>\n                            <Clickable  className=\"voice-button\" onClick={this.onListenHandler}>\n                                {listening? <div className=\"voice-command\">\"Stop Talking\"</div>\n                                :<div className=\"voice-command\">\"Start Talking\"</div>}\n                            </Clickable>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"split-right\" >\n                    <KeyboardEventHandler\n                    handleKeys={['enter']}\n                    onKeyEvent={(key, e) => this.handleKey(key)}>\n                    {/* <div className=\"search-bar-top\">\n                        <div className=\"last-command\">{this.state.last_query}</div>\n                    </div>\n                    <form onSubmit={this.onRequestSearchHandler}>\n                        <input type=\"text\" className=\"search-bar\"/>\n                    </form> */}\n                    <div className=\"text-option-text\"> Jump to: </div>\n                    <TimeField\n                        value={formatTime(this.state.playedSeconds)} onChange={this.onTimeChange}\n                        style={{ border: '2px solid #666', fontSize: 42, width: 130,\n                        padding: '5px 8px', color: '#333', borderRadius: 5}}\n                    />\n                    </KeyboardEventHandler>\n                </div>    \n                </Container>\n                <Container className=\"lower-page\">\n\n                <Timeline   videoTime={this.state.playedSeconds} duration={this.state.duration} ></Timeline>\n                <Segments videoID={this.state.videoID} videoTime={this.state.playedSeconds} jumpVideo = {this.jumpVideo} starts =  {this.state.starts} contents = {this.state.contents} mid_indexes = {this.state.mid_indexes} mid_contents = {this.state.mid_contents} entered_time = {this.state.entered_time}></Segments>\n                </Container>\n            </div>\n        )\n    }\n}\nexport default Home;\n","/Users/mina/Desktop/video-a11y/demo/src/components/Timeline.js",["51","52","53","54"],"import React from \"react\";\nimport '../App.css';\nimport {Progress} from 'semantic-ui-react';\nimport 'semantic-ui-css/semantic.min.css'\nimport { Clickable } from 'react-clickable';\nimport { css } from \"@emotion/react\";\nimport ScaleLoader from \"react-spinners/ScaleLoader\";\n\n\nfunction formatTime(time) {\n    time = Math.round(time);\n  \n    var minutes = Math.floor(time / 60),\n        seconds = time - minutes * 60;\n    seconds = seconds < 10 ? '0' + seconds : seconds;\n    return minutes + \":\" + seconds;\n}\n\n  const override = css`\n  position: absolute;\n  font-size: 5px;\n  height: 5px;\n  left: 69vw; \n  margin-top: -3.8vh;\n`;\n\n\n\nexport default class Timeline extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            hoverPreview: false,\n        };\n\n        this.showPreview = this.showPreview.bind(this);\n    }\n\n   \n\n\n    showPreview = (index) => {\n        this.setState({hoverPreview: index});\n    }\n\n\n\n    render() {\n        const { videoTime, duration} = this.props;\n        const { showPreview } = this;\n        return (\n            <div className=\"progressBar-container\">\n                <div className=\"progressBar\">\n                    <Progress percent={Math.floor(videoTime/duration*100)}color='light-grey' />\n                    <div className=\"time-progress\">{formatTime(videoTime)}</div>\n                </div>\n            </div>\n        );\n    }};","/Users/mina/Desktop/video-a11y/demo/src/scripts.js",[],"/Users/mina/Desktop/video-a11y/demo/src/components/Segments.js",["55","56","57","58","59","60","61","62","63","64","65"],"import React from \"react\";\nimport '../App.css';\nimport 'semantic-ui-css/semantic.min.css'\nimport { Clickable } from 'react-clickable';\nimport Highlighter from \"react-highlight-words\";\nimport KeyboardEventHandler from 'react-keyboard-event-handler';\nimport Speech from \"speak-tts\";\n\n\n\n\nfunction formatTime(time) {\n    time = Math.round(time);\n    var minutes = Math.floor(time / 60),\n        seconds = time - minutes * 60;\n    seconds = seconds < 10 ? '0' + seconds : seconds;\n    return minutes + \":\" + seconds;\n}\n\n\n\n\nexport default class Segments extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            hoverPreview: false,\n            current_level: 0,\n        };\n\n        this.handleKey = this.handleKey.bind(this);\n        this.align_segment = this.align_segment.bind(this);\n    }\n\n    componentDidMount() {\n      const speech = new Speech();\n        if(speech.hasBrowserSupport()) { // returns a boolean\n            console.log(\"speech synthesis supported\")\n        }\n        speech.init({\n            'volume': 1,\n             'lang': 'en-GB',\n             'rate': 1.3,\n             'pitch': 1,\n             'voice':'Google UK English Male',\n             'splitSentences': true,\n             'listeners': {\n                 'onvoiceschanged': (voices) => {\n                     console.log(\"Event voiceschanged\", voices)\n                 }\n             }}).then((data) => {\n            // The \"data\" object contains the list of available voices and the voice synthesis params\n            console.log(\"Speech is ready, voices are available\", data)\n        }).catch(e => {\n            console.error(\"An error occured while initializing : \", e)\n        })\n        this.setState({speech: speech});\n    }\n    static getDerivedStateFromProps(props, current_state) {\n      if (current_state.entered_time !== props.entered_time) {\n        if(!current_state.speech) return;\n\n        var closest_past = Math.max.apply(Math, props.starts.filter(function(x, index){return x <= props.entered_time}));\n        var closest_index = props.starts.findIndex( x => x == closest_past );\n        var closest_mid_past = Math.max.apply(Math, props.mid_indexes.filter(function(x){return x <= closest_index + 1}));\n        var closest_mid_index = props.mid_indexes.findIndex( x => x == closest_mid_past );\n        closest_mid_index = closest_mid_index < 0? 0: closest_mid_index;\n        current_state.speech.speak({\n            text: props.mid_contents[closest_mid_index]\n        }).then(() => {\n            console.log(\"Success !\")\n        }).catch(e => {\n            console.error(\"An error occurred :\", e)\n        })\n        current_state.entered_time = props.entered_time;\n        current_state.current_level = 1;\n      }\n      return null\n    }\n\n\n    handleKey = (key, jumpVideo, current_idx) => {\n      console.log(key, current_idx, this.state.current_level);\n      var new_idx;\n      if(this.state.current_level === 1){\n        switch (key) {\n          case 'left':\n            new_idx = current_idx <= 0? 0 : current_idx-1;\n            var time = this.props.starts[this.props.mid_indexes[new_idx]];\n            jumpVideo(time, true);\n            break;\n          case 'right':\n            new_idx = current_idx === len? current_idx : current_idx+1;\n            var len = this.props.mid_indexes.length;\n            var time = this.props.starts[this.props.mid_indexes[new_idx]];\n            console.log(time);\n            jumpVideo(time, true);\n            break;\n          case 'down':\n            this.setState({current_level: 0});\n            return;\n        }\n        this.state.speech.speak({\n            text: this.props.mid_contents[new_idx].toString()\n        }).then(() => {\n            console.log(\"Success !\")\n        }).catch(e => {\n            console.error(\"An error occurred :\", e)\n        })\n      }\n      else{\n        switch (key) {\n          case 'left':\n            new_idx = current_idx-1;\n            var time = this.props.starts[new_idx];\n            this.state.speech.speak({\n                text: \"Go back\" + (this.props.starts[current_idx] - time).toString() +\"seconds\"\n            }).then(() => {\n                console.log(\"Success !\")\n            }).catch(e => {\n                console.error(\"An error occurred :\", e)\n            })\n            jumpVideo(time, true);\n            break;\n          case 'right':\n            new_idx = current_idx + 1;\n            var time = this.props.starts[new_idx];\n            this.state.speech.speak({\n                text: \"Skipped\" + (this.props.starts[new_idx] - this.props.starts[current_idx]).toString() + \"seconds\"\n            }).then(() => {\n                console.log(\"Success !\")\n            }).catch(e => {\n                console.error(\"An error occurred :\", e)\n            })\n            jumpVideo(time, true);\n            break;\n          case 'up':\n            this.setState({current_level: 1});\n            return;\n        }\n      }\n    }\n\n    align_segment(time, segment_starts, mid_indexes) {\n      time = Math.round(time);\n      time = !time ? 0 : time;\n      var closest_past = Math.max.apply(Math, segment_starts.filter(function(x, index){return x <= time}));\n      var closest_index = segment_starts.findIndex( x => x == closest_past );\n      var closest_mid_past = Math.max.apply(Math, mid_indexes.filter(function(x){return x <= closest_index + 1}));\n      var closest_mid_index = mid_indexes.findIndex( x => x == closest_mid_past );\n      console.log(closest_mid_past,  closest_mid_index);\n      closest_index = closest_index < 0? 0 : closest_index;\n      closest_mid_index = closest_mid_index < 0? 0: closest_mid_index;\n      return [closest_index, closest_mid_index];\n    }\n\n\n    render() {\n        const { videoID, videoTime, jumpVideo, starts, contents, mid_indexes, mid_contents} = this.props;\n        const { current_level } = this.state;\n        const [current_idx, current_mid_idx] = this.align_segment(videoTime, starts, mid_indexes);\n        if (current_level === 1){\n          return(\n            <div className=\"segments-container\">\n              <KeyboardEventHandler\n                handleKeys={['left', 'up', 'right', 'down']}\n                onKeyEvent={(key, e) => this.handleKey(key, jumpVideo, current_mid_idx)} />\n                {mid_indexes.slice(current_mid_idx, current_mid_idx + 4).map((mid_index, idx) => {\n                    var keywords = []\n                    return(\n                      <Clickable onClick={() => this.onClick(mid_index-1)}>\n                      <div className=\"mid-text-option-item\">\n                        <div className=\"text-option-text\">\n                          <div className=\"text-option-meta\">\n                            <div className=\"time-option\">\n                            {formatTime(starts[mid_index-1])} \n                            </div>\n                          </div>\n                          <div className=\"text-option\">\n                          <Highlighter\n                              searchWords={keywords}\n                              autoEscape={true}\n                              textToHighlight={mid_contents[current_mid_idx + idx]}\n                          />\n                          </div>\n                        </div>\n                      </div>\n                      </Clickable>  )\n                     })}\n                    \n            </div>)\n        }\n        \n        return (\n            <div className=\"segments-container\">\n              <KeyboardEventHandler\n                handleKeys={['left', 'up', 'right', 'down']}\n                onKeyEvent={(key, e) => this.handleKey(key, jumpVideo, current_idx)} />\n                {starts.slice(current_idx, current_idx + 4).map((time, idx) => {\n                    var index = current_idx + idx;\n                    var keywords = []\n                    var tokenized_subtitle = contents[index].split(\" \")\n                    var i = tokenized_subtitle.indexOf(\"\");\n                    if (i !== -1) tokenized_subtitle.splice(i, 1);\n                    if (contents[index].length > 160 && !contents[index].includes('...') ){\n                      var joined = tokenized_subtitle.join(' ');\n                      contents[index] = joined;\n                    }\n                    return(\n                      <Clickable onClick={() => this.onClick(index)}>\n                      <div className=\"text-option-item\">\n                        <div className=\"text-option-text\">\n                          <div className=\"text-option-meta\">\n                            <div className=\"time-option\">\n                            {formatTime(time)} \n                            </div>\n                          </div>\n                          <div className=\"text-option\">\n                          <Highlighter\n                              searchWords={keywords}\n                              autoEscape={true}\n                              textToHighlight={contents[index]}\n                          />\n                          </div>\n                        </div>\n                      </div>\n                      </Clickable> )\n                     })}\n            </div>\n        );\n    }};",{"ruleId":"66","replacedBy":"67"},{"ruleId":"68","replacedBy":"69"},{"ruleId":"70","severity":1,"message":"71","line":8,"column":3,"nodeType":"72","messageId":"73","endLine":10,"endColumn":4},{"ruleId":"74","severity":1,"message":"75","line":3,"column":26,"nodeType":"76","messageId":"77","endLine":3,"endColumn":31},{"ruleId":"74","severity":1,"message":"78","line":3,"column":33,"nodeType":"76","messageId":"77","endLine":3,"endColumn":40},{"ruleId":"79","severity":1,"message":"80","line":29,"column":9,"nodeType":"76","messageId":"81","endLine":29,"endColumn":13},{"ruleId":"79","severity":1,"message":"82","line":81,"column":18,"nodeType":"76","messageId":"81","endLine":81,"endColumn":19},{"ruleId":"79","severity":1,"message":"83","line":81,"column":25,"nodeType":"76","messageId":"81","endLine":81,"endColumn":26},{"ruleId":"84","severity":1,"message":"85","line":151,"column":9,"nodeType":"86","messageId":"87","endLine":159,"endColumn":10},{"ruleId":"74","severity":1,"message":"88","line":165,"column":26,"nodeType":"76","messageId":"77","endLine":165,"endColumn":33},{"ruleId":"74","severity":1,"message":"89","line":165,"column":72,"nodeType":"76","messageId":"77","endLine":165,"endColumn":76},{"ruleId":"74","severity":1,"message":"90","line":166,"column":17,"nodeType":"76","messageId":"77","endLine":166,"endColumn":24},{"ruleId":"74","severity":1,"message":"91","line":166,"column":26,"nodeType":"76","messageId":"77","endLine":166,"endColumn":42},{"ruleId":"74","severity":1,"message":"92","line":166,"column":44,"nodeType":"76","messageId":"77","endLine":166,"endColumn":53},{"ruleId":"74","severity":1,"message":"93","line":166,"column":55,"nodeType":"76","messageId":"77","endLine":166,"endColumn":76},{"ruleId":"94","severity":1,"message":"95","line":200,"column":33,"nodeType":"96","endLine":200,"endColumn":97},{"ruleId":"74","severity":1,"message":"97","line":5,"column":10,"nodeType":"76","messageId":"77","endLine":5,"endColumn":19},{"ruleId":"74","severity":1,"message":"98","line":7,"column":8,"nodeType":"76","messageId":"77","endLine":7,"endColumn":19},{"ruleId":"74","severity":1,"message":"99","line":19,"column":9,"nodeType":"76","messageId":"77","endLine":19,"endColumn":17},{"ruleId":"74","severity":1,"message":"100","line":50,"column":17,"nodeType":"76","messageId":"77","endLine":50,"endColumn":28},{"ruleId":"101","severity":1,"message":"102","line":64,"column":60,"nodeType":"103","messageId":"104","endLine":64,"endColumn":62},{"ruleId":"101","severity":1,"message":"102","line":66,"column":69,"nodeType":"103","messageId":"104","endLine":66,"endColumn":71},{"ruleId":"84","severity":1,"message":"85","line":86,"column":9,"nodeType":"86","messageId":"87","endLine":102,"endColumn":10},{"ruleId":"105","severity":1,"message":"106","line":93,"column":39,"nodeType":"76","messageId":"107","endLine":93,"endColumn":42},{"ruleId":"79","severity":1,"message":"80","line":95,"column":17,"nodeType":"76","messageId":"81","endLine":95,"endColumn":21},{"ruleId":"84","severity":1,"message":"85","line":112,"column":9,"nodeType":"86","messageId":"87","endLine":140,"endColumn":10},{"ruleId":"79","severity":1,"message":"80","line":115,"column":17,"nodeType":"76","messageId":"81","endLine":115,"endColumn":21},{"ruleId":"79","severity":1,"message":"80","line":127,"column":17,"nodeType":"76","messageId":"81","endLine":127,"endColumn":21},{"ruleId":"101","severity":1,"message":"102","line":148,"column":60,"nodeType":"103","messageId":"104","endLine":148,"endColumn":62},{"ruleId":"101","severity":1,"message":"102","line":150,"column":61,"nodeType":"103","messageId":"104","endLine":150,"endColumn":63},{"ruleId":"74","severity":1,"message":"108","line":159,"column":17,"nodeType":"76","messageId":"77","endLine":159,"endColumn":24},"no-native-reassign",["109"],"no-negated-in-lhs",["110"],"no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","no-unused-vars","'Image' is defined but never used.","Identifier","unusedVar","'Message' is defined but never used.","no-redeclare","'time' is already defined.","redeclared","'i' is already defined.","'l' is already defined.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'playing' is assigned a value but never used.","'time' is assigned a value but never used.","'addFlag' is assigned a value but never used.","'flagClickHandler' is assigned a value but never used.","'showFlags' is assigned a value but never used.","'addParticipationPoint' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'Clickable' is defined but never used.","'ScaleLoader' is defined but never used.","'override' is assigned a value but never used.","'showPreview' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-use-before-define","'len' was used before it was defined.","usedBeforeDefined","'videoID' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]